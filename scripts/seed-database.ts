import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import * as schema from "../src/db/schema";
import "dotenv/config";

const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql, { schema });

// –ü—Ä–∏–º–µ—Ä userId - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Clerk userId
const userId = process.env.CLERK_USER_ID || "your_clerk_user_id_here";

async function seedDatabase() {
  try {
    console.log("üå± –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    if (userId === "your_clerk_user_id_here") {
      console.log("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CLERK_USER_ID");
      console.log("–ü—Ä–∏–º–µ—Ä: CLERK_USER_ID=user_abc123");
      process.exit(1);
    }

    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è userId: ${userId}`);

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É: English to Portuguese (Brazil)
    const deck1 = await db
      .insert(schema.decksTable)
      .values({
        name: "English to Portuguese (Brazil)",
        description:
          "Learn Portuguese (Brazil) from English - Basic vocabulary and common phrases",
        userId: userId,
      })
      .returning();

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞:", deck1[0].name);

    // –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–¥—ã
    const cards1 = [
      { front: "Hello", back: "Ol√°" },
      { front: "Good morning", back: "Bom dia" },
      { front: "Good afternoon", back: "Boa tarde" },
      { front: "Good evening", back: "Boa noite" },
      { front: "Thank you", back: "Obrigado (m) / Obrigada (f)" },
      { front: "You're welcome", back: "De nada" },
      { front: "Please", back: "Por favor" },
      { front: "Sorry", back: "Desculpe" },
      { front: "Yes", back: "Sim" },
      { front: "No", back: "N√£o" },
      { front: "Water", back: "√Ågua" },
      { front: "Food", back: "Comida" },
      { front: "House", back: "Casa" },
      { front: "Car", back: "Carro" },
      { front: "Book", back: "Livro" },
      { front: "Friend", back: "Amigo (m) / Amiga (f)" },
    ];

    for (const card of cards1) {
      await db.insert(schema.cardsTable).values({
        front: card.front,
        back: card.back,
        deckId: deck1[0].id,
      });
    }

    console.log(
      `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${cards1.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–¥—É "${deck1[0].name}"`
    );

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–¥—É: Portuguese (Brazil) to English
    const deck2 = await db
      .insert(schema.decksTable)
      .values({
        name: "Portuguese (Brazil) to English",
        description:
          "Learn English from Portuguese (Brazil) - Reverse translation practice",
        userId: userId,
      })
      .returning();

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞:", deck2[0].name);

    // –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–¥—ã
    const cards2 = [
      { front: "Ol√°", back: "Hello" },
      { front: "Bom dia", back: "Good morning" },
      { front: "Boa tarde", back: "Good afternoon" },
      { front: "Boa noite", back: "Good evening" },
      { front: "Obrigado", back: "Thank you (male)" },
      { front: "Obrigada", back: "Thank you (female)" },
      { front: "De nada", back: "You're welcome" },
      { front: "Por favor", back: "Please" },
      { front: "Desculpe", back: "Sorry" },
      { front: "Sim", back: "Yes" },
      { front: "N√£o", back: "No" },
      { front: "√Ågua", back: "Water" },
      { front: "Comida", back: "Food" },
      { front: "Casa", back: "House" },
      { front: "Carro", back: "Car" },
      { front: "Livro", back: "Book" },
    ];

    for (const card of cards2) {
      await db.insert(schema.cardsTable).values({
        front: card.front,
        back: card.back,
        deckId: deck2[0].id,
      });
    }

    console.log(
      `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${cards2.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–¥—É "${deck2[0].name}"`
    );

    console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
    console.log(
      `üìä –°–æ–∑–¥–∞–Ω–æ 2 –∫–æ–ª–æ–¥—ã —Å ${cards1.length + cards2.length} –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏`
    );
    console.log("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∫–æ–ª–æ–¥—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
}

seedDatabase();
